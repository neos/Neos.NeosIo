/**
 * Base Button:
 * `.btn` - The base class for all buttons.
 * Button styles can be applied to any element. Typically you'll want to use
 * either a `<button>` or an `<a>` element:
 *
 *     @example
 *     a.btn My Button
 */
@mixin btn() {
	display: inline-block;

	// Set in em's so we can change the size of the button depending on the font-size.
	padding: 0;
	border: none;
	cursor: pointer;
	position: relative;

	// Normalize some rules across the targeted elements (<input>, <button> and the .btn class).
	font-weight: $regular;
	line-height: 1;
	color: currentColor;
	vertical-align: top;
	transition: all $transition-duration ease;
	text-align: center;
	background: 0;

	& + & {
		margin-left: 1em;
	}

	&,
	&:hover,
	&:active,
	&:focus {
		text-decoration: none;
	}

	&:active,
	&:focus {
		transform: translateY(3px);
	}

	//
	// Edge case for the neos backend.
	//
	a { color: currentColor; }
}
.btn {
	@include btn();
}

@mixin btnSvgBorder($strokeColor, $fillColor, $contentPadding: 5px 40px) {
	$cornerWidth: 14px;
	$cornerHeight: 10px;
	$strokeWidth: 1px;

	> * {
		position: relative;
		width: 100%;
	}

	.btn__upperCorner, .btn__bottomCorner {
		height: $cornerHeight;

		svg {
			position: absolute;

			line {
				stroke: $strokeColor;
				stroke-width: $strokeWidth;
			}

			polygon {
				fill: $fillColor;
			}
		}

		&:after {
			display: block;
			content: '';
			overflow-y: hidden;
			width: 100%;
			height: $cornerHeight;
			background: $fillColor;
		}
	}

	.btn__upperCorner {
		padding-left: $cornerWidth;
		svg {
			left: 0;
			top: 0;
		}

		&:after {
			border-right: $strokeWidth solid $strokeColor;
			border-top: $strokeWidth solid $strokeColor;
		}
	}

	.btn__bottomCorner {
		padding-right: $cornerWidth;
		svg {
			right: 0;
			bottom: 0;
		}

		&:after {
			border-left: $strokeWidth solid $strokeColor;
			border-bottom: $strokeWidth solid $strokeColor;
		}
	}

	.btn__content {
		border-left: $strokeWidth solid $strokeColor;
		border-right: $strokeWidth solid $strokeColor;
		width: 100%;

		padding: $contentPadding;
		background: $fillColor;
	}

	svg.btn__leftBorder { left: -13px; }
	svg.btn__rightBorder { right: -13px; }
}

/*
 * A basic :hover effect for all solid buttons.
 */
@mixin solidBtnHoverPulse($baseColor) {
	$hoverColor: lighten($baseColor, 10);
	$transition: all .5s;

	position: relative;

	&:hover {
		.btn__upperCorner, .btn__bottomCorner {
			&:after{
				transition: $transition;
				background: $hoverColor;
				border-color: $hoverColor;
			}
			polygon {
				transition: $transition;
				fill: $hoverColor;
			}
			line {
				transition: all 0.5s;
				stroke: $hoverColor;
			}
		}
		.btn__content {
			transition: $transition;
			border-color: $hoverColor;
			background: $hoverColor;
		}
	}
}

/**
 * Full-Width Button:
 * `.btn--full` - Set the button width to the width of it's parent element.
 *
 *     @example
 *     a.btn.btn--full My Button
 */
@mixin btn--full() {
	display: block;
	text-align: center;

	// The following is so that this class works properly on inputs as well as anchor tags.
	padding-right: 0;
	padding-left: 0;
	width: 100%;
}
.btn--full {
	@include btn--full();
}

/**
 * Bordered Primary Button:
 * `.btn--primary` - Sets the button to a bordered button which is themed after the primary brand color.
 *
 *     @example
 *     a.btn.btn--primary My Button
 */
@mixin btn--primary() {
	color: brand('primary');

	&:hover {
		@include btnSvgBorder(brand('primary'), transparent);
	}
}
.btn--primary {
	@include btn--primary();
	@include btnSvgBorder(transparentize(brand('primary'), 0.4), transparent);
}

/**
 * Solid Primary Button:
 * `.btn--solidPrimary` - Sets the button to a solid button which is themed after the primary brand color.
 *
 *     @example
 *     a.btn.btn--solidPrimary My Button
 */
.btn--solidPrimary {
	color: #FFF;

	@include btnSvgBorder(brand('primary'), brand('primary'));
	@include solidBtnHoverPulse(brand('primary'));
}

/**
 * Bordered Secondary Button:
 * `.btn--secondary` - Sets the button to a bordered button which is themed after the secondary brand color.
 *
 *     @example
 *     a.btn.btn--secondary My Button
 */
@mixin btn--secondary() {
	color: brand('secondary');

	&:hover {
		@include btnSvgBorder(brand('teritary'), transparent);
	}
}
.btn--secondary {
	@include btn--secondary();
	@include btnSvgBorder(#ccc, transparent);
}

/**
 * Solid Secondary Button:
 * `.btn--solidSecondary` - Sets the button to a solid button which is themed after the secondary brand color.
 *
 *     @example
 *     a.btn.btn--solidSecondary My Button
 */
.btn--solidSecondary {
	color: #FFF;

	@include btnSvgBorder(brand('secondary'), brand('secondary'));
	@include solidBtnHoverPulse(brand('secondary'));
}

/**
 * Bordered Bright Button:
 * `.btn--bright` - Sets the button to a bordered button which is themed in white.
 *
 *     @example
 *     <div style="background:#000;">
 *       <a class="btn btn--bright">My Button</a>
 *     </div>
 */
@mixin btn--bright() {
	color: #FFF;

	&:hover {
		@include btnSvgBorder(#fff, transparent);
	}
}
.btn--bright {
	@include btn--bright();
	@include btnSvgBorder(transparentize(#fff, 0.4), transparent);
}

/**
 * Solid Bright Button:
 * `.btn--solidBright` - Sets the button to a solid button which is themed in white.
 *
 *     @example
 *     <div style="background:#000;">
 *       <a class="btn btn--solidBright">My Button</a>
 *     </div>
 */
@mixin btn--solidBright() {
	color: currentColor;

	&:hover {
		@include btnSvgBorder(#fff, #fff);
	}
}
.btn--solidBright {
	@include btn--solidBright();
	@include btnSvgBorder(transparentize(#fff, 0.1), transparentize(#fff, 0.1));
}

# A package entry can have the following options:

# package                  <string>        (required) The name of the package
# files                    <string|array>  The names of the entry files. If none given, all parsable files in the input folder get rendered
# folder.input             <string>        (default: `Fusion`) The folder under `Resources/Private` where to look for the entry files
# folder.output.package    <string|array>  If set, the files will be writen in a different package (one or multiple packages)
# folder.output.inline     <string>        (default: `Private/Templates/InlineAssets`) The folder where inline files get rendered
# folder.output.style      <string>        (default: `Public/Styles`) The folder where styles get rendered
# folder.output.script     <string>        (default: `Public/Scripts`) The folder where scripts get rendered
# folder.output.module     <string>        (default: `Public/Modules`) The folder where modules files get rendered
# folder.output.commonJS   <string>        (default: `Public/CommonJS`) The folder where commonJS files get rendered
# external                 <string|array>  (default: `null`) You can mark a file or a package as external to exclude it from your build. https://esbuild.github.io/api/#external
# inline                   <boolean>       (default: `false`) Flag to toggle if the files should be written to `Resources/Private/Templates/InlineAssets`
# sourcemap                <boolean>       (default: `true`) Flag to toggle source map generation
# format                   <string>        (default: `iife`)
# jsFileExtension.script   <string>        (default: `.js`) Extension for script files. If you set `jsFileExtension` to `false`, it will set to `.js`
# jsFileExtension.module   <string>        (default: `.mjs`) Extension for module files. If you set `jsFileExtension` to `false`, it will set to `.js`
# jsFileExtension.commonJS <string>        (default: `.cjs`) Extension for commonJS files. If you set `jsFileExtension` to `false`, it will set to `.js`

packages:
  - package: Neos.Presentation
    folder:
      input: Assets

# Pass options to the postcss config file
# In this example, you would have access to the key `prefix` with `ctx.prefix` in your postcss config file (`.postcssrc.js`)
# postcssOptions:
#   prefix: true

# If you want to use esbuild features or plugins, you can enable them here.
# If you have nothing changed here, you can delete this section.
esbuild:
  # Set Neos Flow settings as FLOW variable. If `true` all the settings are passed.
  # It is recommended to set it to a path (e.g. Flownative.Sentry)
  # This is the same as passing --path to the ./flow configuration:show command
  # In Javascript the value is available under the variable FLOW
  # (e.g. FLOW.Flownative.Sentry)
  defineFlowSettings: false

  # Set options for esbuild
  options:
    # Define a string (for only one function) or an array with functions who can be removed on production builds.
    # eg. ['console.log','console.info']
    # https://esbuild.github.io/api/#pure
    pure: null

    # The log level can be changed to prevent esbuild from printing warning and/or error messages to the terminal.
    # https://esbuild.github.io/api/#log-level
    logLevel: info

    # A "legal comment" is considered to be any statement-level comment
    # that contains @license or @preserve or that starts with //! or /*!.
    # https://esbuild.github.io/api/#legal-comments
    legalComments: linked

  plugins:
    vue:
      enable: false
      options: null
    svelte:
      enable: false
    babel:
      enable: false
      options: null
  # additionalPlugins:
  #   esbuild-envfile-plugin:
  #     functionName: setup
  #     options: null

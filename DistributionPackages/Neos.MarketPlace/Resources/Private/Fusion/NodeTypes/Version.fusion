prototype(Neos.MarketPlace:Version) < prototype(Neos.MarketPlace:AbstractVersion) {
    class = 'version'
    id = ${q(node).property('version')}

    dist = ${q(node).find('dist').first()}

    distType = ${this.dist.property('type')}
    distUrl = ${this.dist.property('url')}
    distReference = ${this.dist.property('reference')}
    distShaSum = ${this.dist.property('shasum')}

    source = ${q(node).find('source').first()}

    sourceType = ${this.source.property('type')}
    sourceUrl = ${this.source.property('url')}
    sourceReference = ${this.source.property('reference')}

    require = Neos.MarketPlace:PackageRequirements {
        property = 'require'
    }
    requireDev = Neos.MarketPlace:PackageRequirements {
        property = 'requireDev'
    }
    suggest = Neos.MarketPlace:PackageRequirements {
        property = 'suggest'
    }
    replace = Neos.MarketPlace:PackageRequirements {
        property = 'replace'
    }
    conflict = Neos.MarketPlace:PackageRequirements {
        property = 'conflict'
    }
    replace = Neos.MarketPlace:PackageRequirements {
        property = 'replace'
    }
    provide = Neos.MarketPlace:PackageRequirements {
        property = 'provide'
    }

    isAbandoned = ${q(documentNode).property('abandoned') ? true : false}
    abandoned = ${q(documentNode).property('abandoned')}

    hasKeywords = ${String.isBlank(q(node).property('keywords')) ? false : true}
    keywords = Neos.MarketPlace:Tags {
        data = ${q(node).property('keywords')}
    }
}

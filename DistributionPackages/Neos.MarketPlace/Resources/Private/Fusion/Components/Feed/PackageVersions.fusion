prototype(Neos.MarketPlace:Component.Feed.PackageVersions) < prototype(Neos.Fusion:Component) {
    package = null
    renderer = Neos.Fusion:Component {
        @apply.props = ${props}
        name = ${q(props.package).property('title')}
        repository = ${q(props.package).property('repository')}
        authors = Neos.Fusion:Map {
            items = ${q(props.package).find('maintainers').children().get()}
            itemName = 'author'
            itemRenderer = ${q(author).property('title')}
        }

        versions = ${Search.query(props.package)}
        versions.@process {
            nodeType = ${value.nodeType('Neos.MarketPlace:ReleasedVersion')}
            limit = ${value.limit(100)}
            execute = ${value.execute().toArray()}
        }

        renderer = Neos.Fusion:Map {
            items = ${props.versions}
            itemName = 'version'
            itemRenderer = Neos.Fusion:DataStructure {
                time = ${q(version).property('time')}
                identifier = ${version.aggregateId}
                version = ${q(version).property('version')}
                description = ${q(description).property('version')}

                packageName = ${props.name}
                authors = ${props.authors}
                repository = ${props.repository}
            }
        }
    }
}

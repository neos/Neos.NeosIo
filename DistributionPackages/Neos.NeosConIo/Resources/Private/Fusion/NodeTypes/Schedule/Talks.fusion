prototype(Neos.NeosConIo:Schedule.Talks) < prototype(Neos.Fusion:Component) {
    // specified from outside
    day = ''
    talks = ${q(site).find('[instanceof Neos.NeosConIo:Talk]').filterByReference('event', event).filterOnDay('talkDate', day).get()}
    breaksInSchedule = ${q(event).find('[instanceof Neos.NeosConIo:BreakInSchedule]').filterOnDay('talkDate', day).get()}

    talksAndBreaks = ${q(this.talks).add(this.breaksInSchedule).sortMultiple('talkDate', 'ASC')}
    rooms = ${q(event).find('[instanceof Neos.NeosConIo:Room]').get()}

    renderer = afx`
        <Neos.Fusion:Loop items={props.rooms} itemName="room" @children="itemRenderer">
            <div class={"room-header talk talk--room" + q(room).prevAll().count() + " talk--totalRooms" + Array.length(props.rooms)}>
                {q(room).property('name')}
            </div>
        </Neos.Fusion:Loop>
        <Neos.Fusion:Loop items={props.talksAndBreaks} itemName="talk" @children="itemRenderer">
            <div data-date={Date.format(q(talk).property('talkDate'), 'y-m-d')} data-room-id={talk.properties.room.aggregateId} class={"talk " + (talk.properties.room.aggregateId ? 'talk--room' + q(talk.properties.room).prevAll().count() + ' talk--totalRooms' + Array.length(props.rooms) : 'talk--fullWidthBecauseNoRoom talk--totalRooms' + Array.length(props.rooms))}>
                <header class="talk__header">
                    <div class="talk__time">
                        <i class="fas fa-clock"></i>
                        {Date.format(Neos.NeosConIo.Date.timezone(q(talk).property('talkDate'), 'Europe/Berlin'), 'G:i')}
                    </div>

                    <Neos.NeosConIo:ScheduleSpeakerImages talk={talk} />
                    <h4 class="talk__title">
                        {q(talk).property('title')}
                        <div class="talk__roomSmallDevice">
                            {q(talk.properties.room).property('name')}
                        </div>
                    </h4>
                </header>

                <div class="talk__description">
                    {q(talk).property('text')}
                </div>
            </div>
        </Neos.Fusion:Loop>
    `
}

prototype(Neos.NeosConIo:ScheduleSpeakerImages) < prototype(Neos.Fusion:Component)  {
    speakers = ${q(talk).property('speakers')}

    renderer = afx`
        <div class="talk__speaker-images">
            <Neos.Fusion:Loop items={props.speakers} itemName="speaker" @children="itemRenderer">
                <Neos.NeosConIo:ScheduleSpeakerImage speaker={speaker} />
            </Neos.Fusion:Loop>
        </div>
    `
}
prototype(Neos.NeosConIo:ScheduleSpeakerImage) < prototype(Neos.Fusion:Component)  {
    imageUri = Neos.Neos:ImageUri {
        asset = ${q(speaker).property('image')}
        maximumWidth = 50
        maximumHeight = 50
        allowCropping = true
    }

    renderer = afx`
        <img src={props.imageUri} height="50" width="50" class="talk__speaker-image" alt={speaker.properties.title} title={speaker.properties.title} @if.imageIsSet={props.imageUri} />
    `
}

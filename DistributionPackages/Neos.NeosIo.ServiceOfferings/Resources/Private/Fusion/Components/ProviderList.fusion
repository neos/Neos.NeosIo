prototype(Neos.NeosIo.ServiceOfferings:Component.ProviderList) < prototype(Neos.Fusion:Component) {
    serviceProviders = ${[]}

    renderer = Neos.Fusion:Component {
        @apply.props = ${props}

        translationData = Neos.Fusion:DataStructure {
            name = ${Translation.translate('serviceListing.name', '', [], 'Main', 'Neos.NeosIo.ServiceOfferings')}
            location = ${Translation.translate('serviceListing.location', '', [], 'Main', 'Neos.NeosIo.ServiceOfferings')}
            size = ${Translation.translate('serviceListing.size', '', [], 'Main', 'Neos.NeosIo.ServiceOfferings')}
            search = ${Translation.translate('serviceListing.search', '', [], 'Main', 'Neos.NeosIo.ServiceOfferings')}
            chooseCountry = ${Translation.translate('serviceListing.chooseCountry', '', [], 'Main', 'Neos.NeosIo.ServiceOfferings')}
            chooseServiceType = ${Translation.translate('serviceListing.chooseServiceType', '', [], 'Main', 'Neos.NeosIo.ServiceOfferings')}
            chooseSize = ${Translation.translate('serviceListing.chooseSize', '', [], 'Main', 'Neos.NeosIo.ServiceOfferings')}
            tableView = ${Translation.translate('serviceListing.tableView', '', [], 'Main', 'Neos.NeosIo.ServiceOfferings')}
            gridView = ${Translation.translate('serviceListing.gridView', '', [], 'Main', 'Neos.NeosIo.ServiceOfferings')}
            noProvidersFound = ${Translation.translate('serviceListing.noProvidersFound', '', [], 'Main', 'Neos.NeosIo.ServiceOfferings')}
            providers = ${Translation.translate('serviceListing.providers', '', [], 'Main', 'Neos.NeosIo.ServiceOfferings')}
        }

        serviceProvidersData = Neos.Fusion:Map {
            items = ${props.serviceProviders}
            itemName = 'serviceProvider'
            itemRenderer = Neos.Fusion:DataStructure {
                identifier = ${serviceProvider.identifier}
                title = ${q(serviceProvider).property('title')}
                description = ${q(serviceProvider).property('description') || ''}
                website = ${q(serviceProvider).property('website') || ''}
                logo = Neos.Neos:ImageUri {
                    asset = ${q(serviceProvider).property('logo')}
                    @if.hasLogo = ${q(serviceProvider).property('logo')}
                }
                bannerImage = Neos.Neos:ImageUri {
                    asset = ${q(serviceProvider).property('bannerImage')}
                    @if.hasBannerImage = ${q(serviceProvider).property('bannerImage')}
                }
                street = ${q(serviceProvider).property('street') || ''}
                zipcode = ${q(serviceProvider).property('zipcode') || ''}
                city = ${q(serviceProvider).property('city') || ''}
                country = ${q(serviceProvider).property('country')}
                typesOfService = Neos.Fusion:Map {
                    items = ${q(serviceProvider).property('typesOfService') || []}
                    itemRenderer = ${item.label}
                    @process.sort = ${Array.sort(value)}
                }
                searchText = ${String.toLowerCase(Array.join(Array.concat([this.title, this.city, this.country], this.typesOfService), ' '))}
                size = ${q(serviceProvider).property('size') || ''}
                url = Neos.Neos:NodeUri {
                    node = ${serviceProvider}
                }
                latitude = ${q(serviceProvider).property('latitude') || 0}
                longitude = ${q(serviceProvider).property('longitude') || 0}
                badges = Neos.Fusion:Map {
                    items = ${q(serviceProvider).property('badges') || []}
                    itemName = 'badge'
                    itemRenderer = Neos.Neos:ImageUri {
                        asset = ${q(badge).property('image')}
                        attributes {
                            width = 120
                            height = 180
                            alt = ${q(badge).property('description')}
                        }
                    }
                    @if.hasBadges = ${Type.isArray(q(serviceProvider).property('badges')) && Array.length(q(serviceProvider).property('badges'))}
                }
                awards = ${Array.map(q(serviceProvider).children('awards').children().get(), a => q(a).property('award').label + ' (' + q(a).property('title') + ')')}
            }
        }

        renderer = afx`
            <h2 class="headline">{I18n.id('serviceListing.headline').value('serviceListing.headline').package('Neos.NeosIo.ServiceOfferings').source('Main')}</h2>
            <div class="service-providers__list" id="service-providers-listing"
                 data-provider-data={Json.stringify(props.serviceProvidersData)}
                 data-translation-data={Json.stringify(props.translationData)}
            >
            </div>
        `
    }
}

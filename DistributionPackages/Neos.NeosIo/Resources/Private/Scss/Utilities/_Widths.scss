/**
 * Width utilities:
 * Short utility width are responsive and mobile first.
 * As with every utility class, it is namespaced with `u-` and `w` for width.
 *
 * Afterwards you can specify the optional breakpoint. Values can be found in the _Variables.scss
 * in the $mq-breakpoints variable. For demonstration purposes we will use `small` breakpoint which
 * is referenced by the `s`.
 *
 * Now let's specify the target width - Since they are percentage based, we use a fraction number, f.e. `1/1` for one whole,
 * `1/2` for one half and so on. We provide you with widths up to `1/12Â´or one twelfths.
 *
 * Our finished class could look like `u-ws1/4` - Which applies a one quarter width on the small breakpoint and upwards.
 *
 *     @example
 *     <div class="u-w1/1 u-wm1/2 u-wl1/3" style="background: #ccc;">
 *       This div should cover the whole width on the small screens, the half on
 *       medium screens and one third on large screens and upwards.
 *     </div>
 */
@mixin grid-setup($namespace: '') {
	// Whole
	.u-w#{$namespace}1#{\/}1 {
		width: 100%;
	}

	// Halves#{\/}
	.u-w#{$namespace}1#{\/}2 {
		width: 50%;
	}

	// Thirds
	.u-w#{$namespace}1#{\/}3 {
		width: 33.333%;
	}
	.u-w#{$namespace}2#{\/}3 {
		width: 66.666%;
	}

	// Quarters
	.u-w#{$namespace}1#{\/}4 {
		width: 25%;
	}
	.u-w#{$namespace}2#{\/}4 {
		width: 50%;
	}
	.u-w#{$namespace}3#{\/}4 {
		width: 75%;
	}

	// Fifths
	.u-w#{$namespace}1#{\/}5 {
		width: 20%;
	}
	.u-w#{$namespace}2#{\/}5 {
		width: 40%;
	}
	.u-w#{$namespace}3#{\/}5 {
		width: 60%;
	}
	.u-w#{$namespace}4#{\/}5 {
		width: 80%;
	}

	// Sixths
	.u-w#{$namespace}1#{\/}6 {
		width: 16.666%;
	}
	.u-w#{$namespace}2#{\/}6 {
		width: 33.333%;
	}
	.u-w#{$namespace}3#{\/}6 {
		width: 50%;
	}
	.u-w#{$namespace}4#{\/}6 {
		width: 66.666%;
	}
	.u-w#{$namespace}5#{\/}6 {
		width: 83.333%;
	}

	// Eighths
	.u-w#{$namespace}1#{\/}8 {
		width: 12.5%;
	}
	.u-w#{$namespace}2#{\/}8 {
		width: 25%;
	}
	.u-w#{$namespace}3#{\/}8 {
		width: 37.5%;
	}
	.u-w#{$namespace}4#{\/}8 {
		width: 50%;
	}
	.u-w#{$namespace}5#{\/}8 {
		width: 62.5%;
	}
	.u-w#{$namespace}6#{\/}8 {
		width: 75%;
	}
	.u-w#{$namespace}7#{\/}8 {
		width: 87.5%;
	}

	// Tenths
	.u-w#{$namespace}1#{\/}10 {
		width: 10%;
	}
	.u-w#{$namespace}2#{\/}10 {
		width: 20%;
	}
	.u-w#{$namespace}3#{\/}10 {
		width: 30%;
	}
	.u-w#{$namespace}4#{\/}10 {
		width: 40%;
	}
	.u-w#{$namespace}5#{\/}10 {
		width: 50%;
	}
	.u-w#{$namespace}6#{\/}10 {
		width: 60%;
	}
	.u-w#{$namespace}7#{\/}10 {
		width: 70%;
	}
	.u-w#{$namespace}8#{\/}10 {
		width: 80%;
	}
	.u-w#{$namespace}9#{\/}10 {
		width: 90%;
	}

	// Twelfths
	.u-w#{$namespace}1#{\/}12 {
		width: 8.333%;
	}
	.u-w#{$namespace}2#{\/}12 {
		width: 16.666%;
	}
	.u-w#{$namespace}3#{\/}12 {
		width: 25%;
	}
	.u-w#{$namespace}4#{\/}12 {
		width: 33.333%;
	}
	.u-w#{$namespace}5#{\/}12 {
		width: 41.666%
	}
	.u-w#{$namespace}6#{\/}12 {
		width: 50%;
	}
	.u-w#{$namespace}7#{\/}12 {
		width: 58.333%;
	}
	.u-w#{$namespace}8#{\/}12 {
		width: 66.666%;
	}
	.u-w#{$namespace}9#{\/}12 {
		width: 75%;
	}
	.u-w#{$namespace}10#{\/}12 {
		width: 62.5%;
	}
	.u-w#{$namespace}11#{\/}12 {
		width: 91.666%;
	}
}

/**
 * Sizes which are used in conjunction with other objects and abstractions like the grid system.
 */
@include grid-setup();

@if($is-responsive == true) {
	@each $key, $map in $mq-breakpoints {
		$classNameShortHand: map-get($map, 'classNameShorthand');

		@if($classNameShortHand) {
			@include mq($key) {
				@include grid-setup($classNameShortHand);
			}
		}
	}
}

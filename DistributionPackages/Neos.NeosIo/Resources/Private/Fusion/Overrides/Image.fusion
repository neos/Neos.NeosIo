prototype(Neos.NodeTypes:Image) >
prototype(Neos.NodeTypes:Image) < prototype(Neos.Neos:ContentComponent) {
    title = ${q(node).property('title')}
    title.@process.filenameFallback = ${String.isBlank(value) ? q(node).property('image').label : value}

    hasCaption = ${q(node).property("hasCaption")}

    alternativeText = ${q(node).property('alternativeText')}
    alternativeText.@process {
        titleFallback = ${String.isBlank(value) ? q(node).property('title') : value}
        filenameFallback = ${String.isBlank(value) ? q(node).property('image').label : value}
    }

    image = ${q(node).property('image')}
    className = Neos.Fusion:DataStructure {
        main = 'neos-nodetypes-image'

        alignment = ${'neos-alignment-' + q(node).property('alignment')}
        alignment.@if.isSet = ${q(node).property('alignment')}

        addImageStyle = ${'image--style image--style-' + q(node).property('imageStyle')}
        addImageStyle.@if.isSet = ${!String.isBlank(q(node).property('imageStyle'))}
    }

    loading = 'lazy'

    height = null
    maximumHeight = null
    maximumHeight.@process.override = ${q(node).property('customHeight') || value}

    width = null
    // The maximum page width 1096 * 2
    maximumWidth = 2192
    maximumWidth.@process.override = ${q(node).property('customWidth') || value}

    allowCropping = false
    allowUpScaling = false

    link = ${q(node).property("link")}
    link.@process.convertUris = Neos.Neos:ConvertUris {
        forceConversion = true
        absolute = true
    }

    caption = Neos.Neos:Editable {
        property = 'caption'
        block = false
        renderer.fallback {
            @position = 'after editable'
            condition = ${!q(node).property('caption') && q(node).property('image').caption}
            renderer = ${q(node).property('image').caption}
            @process.convertUris = Neos.Neos:ConvertUris
        }
    }

    renderer.@context.image = Neos.Fusion:Case {
        default {
            condition = ${props.image}
            renderer = Neos.Fusion:Component {
                @apply.props = ${props}

                thumbnail = ${Neos.Seo.Image.createThumbnail(
                props.image,
                null,
                props.width,
                props.maximumWidth,
                props.height,
                props.maximumHeight,
                props.allowCropping,
                props.allowUpScaling,
                true
                )}

                renderer.@process.debug = Neos.Fusion:Debug.Console {
                    value = ${props}
                }

                renderer = afx`
                    <img
                        title={props.title}
                        alt={props.alternativeText}
                        style={'max-height: ' + props.maximumHeight + 'px;'}
                        style.@if={props.maximumHeight}
                        width={props.thumbnail.width || props.width}
                        height={props.thumbnail.height || props.height}
                        loading={props.loading}
                    >
                      <Neos.Fusion:ResourceUri resource={props.thumbnail.resource} @path='attributes.src'/>
                    </img>
                `
            }
        }
        fallback {
            condition = ${!props.image && node.context.inBackend}
            renderer = afx`
                <img
                    title="Dummy image"
                    alt="Dummy image"
                    class="neos-handle"
                    loading={props.loading}
                    src={StaticResource.uri('Neos.Neos', 'Public/Images/dummy-image.svg')}
                />
            `
        }
    }

    renderer = afx`
        <div class={props.className}>
            <figure>
                <a
                    href={props.link}
                    href.@if.live={!node.context.inBackend}
                    target={props.openInNewTab && '_blank'}
                    rel={props.openInNewTab && 'noopener'}
                    title={props.title}
                    @if.set={props.link}
                >
                    {image}
                </a>
                {!props.link ? image : ''}
                <figcaption @if.set={props.caption}>
                    {props.caption}
                </figcaption>
            </figure>
        </div>
    `
}

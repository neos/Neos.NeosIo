prototype(Neos.NodeTypes:Image) >
prototype(Neos.NodeTypes:Image) < prototype(Neos.Neos:ContentComponent) {
    title = ${q(node).property('title')}
    title.@process.filenameFallback = ${String.isBlank(value) ? q(node).property('image').label : value}

    hasCaption = ${q(node).property("hasCaption")}

    alternativeText = ${q(node).property('alternativeText')}
    alternativeText.@process {
        titleFallback = ${String.isBlank(value) ? q(node).property('title') : value}
        filenameFallback = ${String.isBlank(value) ? q(node).property('image').label : value}
    }

    image = ${q(node).property('image')}

    loading = 'lazy'
    lightbox = true

    height = null
    maximumHeight = null
    maximumHeight.@process.override = ${q(node).property('customHeight') || value}

    width = null
    // The maximum page width 1096 * 2
    maximumWidth = 2192
    maximumWidth.@process.override = ${q(node).property('customWidth') || value}

    allowCropping = false
    allowUpScaling = false

    link = ${q(node).property("link")}
    link.@process.convertUris = Neos.Neos:ConvertUris {
        forceConversion = true
        absolute = true
    }

    caption = Neos.Neos:Editable {
        property = 'caption'
        block = false
        renderer.fallback {
            @position = 'after editable'
            condition = ${!q(node).property('caption') && q(node).property('image').caption}
            renderer = ${q(node).property('image').caption}
            @process.convertUris = Neos.Neos:ConvertUris
        }
    }

    @private {
        className = Neos.Fusion:DataStructure {
            main = 'neos-nodetypes-image'

            alignment = ${'neos-alignment-' + q(node).property('alignment')}
            alignment.@if.isSet = ${q(node).property('alignment')}
        }

        figureClassName = Neos.Fusion:DataStructure {
            addImageStyle = ${'image--style image--style-' + q(node).property('imageStyle')}
            addImageStyle.@if.isSet = ${!String.isBlank(q(node).property('imageStyle'))}
        }

        thumbnail = ${props.image ? Neos.Seo.Image.createThumbnail(
            props.image,
            null,
            props.width,
            props.maximumWidth,
            props.height,
            props.maximumHeight,
            props.allowCropping,
            props.allowUpScaling,
            false
        ) : null}

        imageSrc = Neos.Fusion:ResourceUri {
            resource = ${private.thumbnail.resource}
            @if.set = ${private.thumbnail}
        }

        lightboxSrc = Neos.Fusion:ResourceUri {
            resource = ${props.image.resource}
            @if.set = ${props.image}
        }

        image = Neos.Fusion:Case {
            image {
                condition = ${private.imageSrc}
                renderer = afx`
                    <img
                        title={props.title}
                        alt={props.alternativeText}
                        style={'max-height: ' + props.maximumHeight + 'px;'}
                        style.@if={props.maximumHeight}
                        width={private.thumbnail.width || props.width}
                        height={private.thumbnail.height || props.height}
                        loading={props.loading}
                        src={private.imageSrc}
                        data-lightbox={private.imageSrc}
                        data-lightbox.@if={props.lightbox}
                    />
                `
            }
            fallback {
                condition = true
                renderer = afx`
                    <img
                        title="Dummy image"
                        alt="Dummy image"
                        class="neos-handle"
                        loading={props.loading}
                        src={StaticResource.uri('Neos.Neos', 'Public/Images/dummy-image.svg')}
                    />
                `
            }
        }
    }

    renderer = afx`
        <div class={private.className}>
            <figure class={private.figureClassName}>
                <a
                    href={props.link}
                    href.@if.live={!renderingMode.isEdit}
                    target={props.openInNewTab && '_blank'}
                    rel={props.openInNewTab && 'noopener'}
                    title={props.title}
                    @if.set={props.link}
                >
                    {private.image}
                </a>
                {!props.link ? private.image : ''}
                <figcaption @if.set={props.caption}>
                    {props.caption}
                </figcaption>
            </figure>
        </div>
    `
}

prototype(Neos.NeosIo:Event.List) < prototype(Neos.Neos:ContentComponent) {
    type = ${q(node).property('type')}
    mode = ${q(node).property('mode')}
    limit = ${q(node).property('limit')}
    sourceFolder = ${q(node).property('sourceFolder') || documentNode}

    events = ${q(this.sourceFolder).find('[instanceof Neos.NeosIo:Event]')}
    events.@process {
        filterType = ${value.filter('[type = "' + this.type + '"]')}
        filterType.@if.hasType = ${this.type}

        filterDate = ${value.filterByDate('startDate', Date.now(), this.mode == 'archive' ? '<' : '>')}
        filterDate.@if.hasDateFilter = ${this.mode != null}

        sort = ${value.sort('startDate', this.mode == 'archive' ? 'DESC' : 'ASC')}
        slice = ${value.slice(0, this.limit)}
        slice.@if.hasLimit = ${this.limit > 0}
    }

    renderer = Neos.NeosIo:Component.Event.List {
        alwaysShowNoEntriesNotice = ${renderingMode.isEdit}
        noEntriesNotice = Neos.Neos:Editable {
            property = 'noEntriesNotice'
            block = true
        }
        events = Neos.Fusion:Map {
            items = ${props.events}
            itemRenderer = Neos.Fusion:DataStructure {
                name = ${q(item).property('title')}
                startDate = ${q(item).property('startDate')}
                endDate = ${q(item).property('endDate')}
                location = ${q(item).property('location')}
                url = ${q(item).property('url')}
                organizer = ${q(item).property('organizer')}
                detailsUrl = Neos.Neos:NodeUri {
                    node = ${item}
                }
            }
        }
    }
    @cache {
        mode = 'cached'
        # 86400 seconds == 1 day
        maximumLifetime = '86400'
        entryIdentifier {
            node = ${Neos.Caching.entryIdentifierForNode(node)}
        }
        entryTags {
            node = ${Neos.Caching.nodeTag(node)}
            eventNodes = ${Neos.Caching.nodeTypeTag('Neos.NeosIo:Event', documentNode)}
        }
    }
}

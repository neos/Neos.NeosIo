prototype(Neos.NeosIo:TextWithImage) < prototype(Neos.Neos:ContentComponent) {

    alternativeText = ${q(node).property('alternativeText')}
    alternativeText.@process {
        titleFallback = ${String.isBlank(value) ? q(node).property('title') : value}
        filenameFallback = ${String.isBlank(value) ? q(node).property('image').label : value}
    }

    image = ${q(node).property('image')}
    imageClassName = Neos.Fusion:DataStructure {
        alignment = ${'neos-alignment-' + q(node).property('alignment')}
        alignment.@if.isSet = ${q(node).property('alignment')}

        addImageStyle = ${'image--style image--style-' + q(node).property('imageStyle')}
        addImageStyle.@if.isSet = ${!String.isBlank(q(node).property('imageStyle'))}
    }

    loading = 'lazy'

    height = null
    maximumHeight = null
    maximumHeight.@process.override = ${q(node).property('customHeight') || value}

    width = null
    // The maximum page width 1096 * 2
    maximumWidth = 2192
    maximumWidth.@process.override = ${q(node).property('customWidth') || value}

    allowCropping = false
    allowUpScaling = false

    link = ${q(node).property("link")}
    link.@process.convertUris = Neos.Neos:ConvertUris {
        forceConversion = true
        absolute = true
    }

    caption = Neos.Neos:Editable {
        property = 'caption'
        block = false
        renderer.fallback {
            @position = 'after editable'
            condition = ${!q(node).property('caption') && q(node).property('image').caption}
            renderer = ${q(node).property('image').caption}
            @process.convertUris = Neos.Neos:ConvertUris
        }
    }

    renderer.@context.image = Neos.Fusion:Case {
        default {
            condition = ${props.image}
            renderer = Neos.Neos:ImageTag {
                asset = ${props.image}
                title = ${props.title}
                maximumHeight = ${props.maximumHeight}
                maximumWidth = ${props.maximumWidth}
                allowUpScaling = ${props.allowUpScaling}
                allowCropping = ${props.allowCropping}
                width = ${props.width}
                height = ${props.height}
                async = true
                attributes.alt = ${props.alternativeText}
                attributes.loading = ${props.loading}
                attributes.style = Neos.Fusion:Join {
                    maxHeight = ${'max-height: ' + props.maximumHeight + 'px;'}
                    maxHeight.@if.set = ${props.maximumHeight}
                }
            }
        }
        fallback {
            condition = ${!props.image && node.context.inBackend}
            renderer = afx`
                <img
                    title="Dummy image"
                    alt="Dummy image"
                    class="neos-handle"
                    loading={props.loading}
                    src={StaticResource.uri('Neos.Neos', 'Public/Images/dummy-image.svg')}
                />
            `
        }
    }

    renderer = afx`
        <div class="neos-nodetypes-image">
            <figure class={props.imageClassName}>
                <a
                    href={props.link}
                    href.@if.live={!node.context.inBackend}
                    target={props.openInNewTab && '_blank'}
                    rel={props.openInNewTab && 'noopener'}
                    title={props.title}
                    @if.set={props.link}
                >
                    {image}
                </a>
                {!props.link ? image : ''}
            </figure>
            <Neos.Neos:Editable property="text" />
        </div>
    `

}

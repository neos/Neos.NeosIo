From 147a81e6a3b1c09b04db6c41b66ab86037834c8c Mon Sep 17 00:00:00 2001
From: Sebastian Helzle <sebastian@helzle.it>
Date: Thu, 12 Jun 2025 14:13:30 +0200
Subject: [PATCH 1/2] BUGFIX: Reimplement nodetype option for the
 EventSourceFrontendNodeRoutePartHandler

This feature went missing with 9.0.0 and is necessary for routes
that should only work with certain nodetypes.
F.e. a RSS feed routes only on a news overview page.
---
 ...entSourcedFrontendNodeRoutePartHandler.php | 66 +++++++++++++++----
 1 file changed, 54 insertions(+), 12 deletions(-)

diff --git a/Neos.Neos/Classes/FrontendRouting/EventSourcedFrontendNodeRoutePartHandler.php b/Neos.Neos/Classes/FrontendRouting/EventSourcedFrontendNodeRoutePartHandler.php
index 897fad3c9e..2d94e82824 100644
--- a/Neos.Neos/Classes/FrontendRouting/EventSourcedFrontendNodeRoutePartHandler.php
+++ b/Neos.Neos/Classes/FrontendRouting/EventSourcedFrontendNodeRoutePartHandler.php
@@ -39,6 +39,7 @@
 use Neos\Neos\FrontendRouting\Exception\NodeNotFoundException;
 use Neos\Neos\FrontendRouting\Exception\ResolvedSiteNotFoundException;
 use Neos\Neos\FrontendRouting\Exception\TargetSiteNotFoundException;
+use Neos\Neos\FrontendRouting\Projection\DocumentNodeInfo;
 use Neos\Neos\FrontendRouting\Projection\DocumentUriPathFinder;
 use Neos\Neos\FrontendRouting\SiteDetection\SiteDetectionFailedException;
 use Neos\Neos\FrontendRouting\SiteDetection\SiteDetectionMiddleware;
@@ -193,6 +194,11 @@ public function matchWithParameters(&$requestPath, RouteParameters $parameters)
         $uriPathSuffix = $this->options['uriPathSuffix'] ?? $resolvedSite->getConfiguration()->uriPathSuffix;
         $remainingRequestPath = $this->truncateRequestPathAndReturnRemainder($requestPath, $uriPathSuffix);
 
+        if ($remainingRequestPath === false) {
+            // no split string found, so we cannot match this request path
+            return false;
+        }
+
         $dimensionResolvingResult = $this->delegatingResolver->fromRequestToDimensionSpacePoint(
             RequestToDimensionSpacePointContext::fromUriPathAndRouteParametersAndResolvedSite(
                 $requestPath,
@@ -214,6 +220,10 @@ public function matchWithParameters(&$requestPath, RouteParameters $parameters)
                 $siteDetectionResult,
                 $contentRepository
             );
+
+            if ($matchResult === false) {
+                return false;
+            }
         } catch (NodeNotFoundException $exception) {
             // we silently swallow the Node Not Found case, as you'll see this in the server log if it interests you
             // (and other routes could still handle this).
@@ -228,7 +238,7 @@ public function matchWithParameters(&$requestPath, RouteParameters $parameters)
     /**
      * @param string $uriPath
      * @param DimensionSpacePoint $dimensionSpacePoint
-     * @return MatchResult
+     * @return MatchResult|false
      * @throws NodeNotFoundException
      */
     private function matchUriPath(
@@ -236,7 +246,7 @@ private function matchUriPath(
         DimensionSpacePoint $dimensionSpacePoint,
         SiteDetectionResult $siteDetectionResult,
         ContentRepository $contentRepository
-    ): MatchResult {
+    ): MatchResult|false {
         $uriPath = trim($uriPath, '/');
         $documentUriPathFinder = $contentRepository->projectionState(DocumentUriPathFinder::class);
         $nodeInfo = $documentUriPathFinder->getEnabledBySiteNodeNameUriPathAndDimensionSpacePointHash(
@@ -244,6 +254,9 @@ private function matchUriPath(
             $uriPath,
             $dimensionSpacePoint->hash
         );
+        if (!$this->nodeTypeIsAllowed($nodeInfo, $contentRepository)) {
+            return false;
+        }
         $nodeAddress = NodeAddress::create(
             $contentRepository->id,
             WorkspaceName::forLive(),
@@ -283,7 +296,11 @@ public function resolveWithParameters(array &$routeValues, RouteParameters $para
 
         try {
             $resolveResult = $this->resolveNodeAddress($nodeAddress, $currentRequestSiteDetectionResult->siteNodeName);
-        } catch (NodeNotFoundException | TargetSiteNotFoundException | InvalidShortcutException $exception) {
+
+            if ($resolveResult === false) {
+                return false;
+            }
+        } catch (NodeNotFoundException|TargetSiteNotFoundException|InvalidShortcutException $exception) {
             // TODO log exception ... yes todo
             return false;
         }
@@ -306,7 +323,7 @@ public function resolveWithParameters(array &$routeValues, RouteParameters $para
     private function resolveNodeAddress(
         NodeAddress $nodeAddress,
         SiteNodeName $currentRequestSiteNodeName
-    ): ResolveResult {
+    ): ResolveResult|false {
         $contentRepository = $this->contentRepositoryRegistry->get(
             $nodeAddress->contentRepositoryId
         );
@@ -315,12 +332,17 @@ private function resolveNodeAddress(
             $nodeAddress->aggregateId,
             $nodeAddress->dimensionSpacePoint->hash
         );
+        if (!$this->nodeTypeIsAllowed($nodeInfo, $contentRepository)) {
+            return false;
+        }
         if ($nodeInfo->isRemoved()) {
-            throw new NodeNotFoundException(sprintf(
-                'The resolved node for address %s in dimension %s is removed',
-                $nodeAddress->aggregateId->value,
-                $nodeAddress->dimensionSpacePoint->toJson()
-            ), 1741017189);
+            throw new NodeNotFoundException(
+                sprintf(
+                    'The resolved node for address %s in dimension %s is removed',
+                    $nodeAddress->aggregateId->value,
+                    $nodeAddress->dimensionSpacePoint->toJson()
+                ), 1741017189
+            );
         }
         if ($nodeInfo->isShortcut()) {
             $nodeInfo = $this->nodeShortcutResolver->resolveNode($nodeInfo, $contentRepository);
@@ -332,7 +354,9 @@ private function resolveNodeAddress(
         $targetSite = $this->siteRepository->findOneByNodeName($nodeInfo->getSiteNodeName()->value);
 
         if ($targetSite === null) {
-            throw new TargetSiteNotFoundException(sprintf('No site found for siteNodeName "%s"', $nodeInfo->getSiteNodeName()->value));
+            throw new TargetSiteNotFoundException(
+                sprintf('No site found for siteNodeName "%s"', $nodeInfo->getSiteNodeName()->value)
+            );
         }
 
         $uriConstraints = UriConstraints::create();
@@ -358,7 +382,7 @@ private function resolveNodeAddress(
     }
 
 
-    private function truncateRequestPathAndReturnRemainder(string &$requestPath, string $uriPathSuffix): string
+    private function truncateRequestPathAndReturnRemainder(string &$requestPath, string $uriPathSuffix): false|string
     {
         if ($uriPathSuffix !== '') {
             $suffixPosition = strpos($requestPath, $uriPathSuffix);
@@ -372,7 +396,7 @@ private function truncateRequestPathAndReturnRemainder(string &$requestPath, str
         }
         $splitStringPosition = strpos($requestPath, $this->splitString);
         if ($splitStringPosition === false) {
-            return '';
+            return false;
         }
         $fullRequestPath = $requestPath;
         $requestPath = substr($requestPath, 0, $splitStringPosition);
@@ -404,6 +428,24 @@ private function buildResolveResultFromUri(UriInterface $uri): ResolveResult
         return new ResolveResult($uri->getPath(), $uriConstraints);
     }
 
+    /**
+     * Whether the given node is allowed according to the "nodeType" option
+     */
+    private function nodeTypeIsAllowed(
+        DocumentNodeInfo $nodeInfo,
+        ContentRepository $contentRepository,
+    ): bool
+    {
+        if (isset($this->options['nodeType'])) {
+            $nodeTypeName = $this->options['nodeType'];
+            $nodeTypeManager = $contentRepository->getNodeTypeManager();
+            return (bool)$nodeTypeManager
+                ->getNodeType($nodeInfo->getNodeTypeName())
+                ?->isOfType($nodeTypeName);
+        }
+        return true;
+    }
+
     public function setSplitString($splitString): void
     {
         $this->splitString = $splitString;

From 0ffbc2ed64fd0c09a6f291a58c45bc3fc99bf820 Mon Sep 17 00:00:00 2001
From: Sebastian Helzle <sebastian@helzle.it>
Date: Thu, 12 Jun 2025 14:25:13 +0200
Subject: [PATCH 2/2] BUGFIX: Reimplement the onlyMatchSiteNodes option for
 node routing

This feature went missing with 9.0.0 and is necessary for routes
that should only work on the homepage.
F.e. the sitemap and robots in the Neos.Seo package.
---
 ...entSourcedFrontendNodeRoutePartHandler.php | 20 +++++++++++++------
 1 file changed, 14 insertions(+), 6 deletions(-)

diff --git a/Neos.Neos/Classes/FrontendRouting/EventSourcedFrontendNodeRoutePartHandler.php b/Neos.Neos/Classes/FrontendRouting/EventSourcedFrontendNodeRoutePartHandler.php
index 2d94e82824..85694b7f85 100644
--- a/Neos.Neos/Classes/FrontendRouting/EventSourcedFrontendNodeRoutePartHandler.php
+++ b/Neos.Neos/Classes/FrontendRouting/EventSourcedFrontendNodeRoutePartHandler.php
@@ -429,19 +429,27 @@ private function buildResolveResultFromUri(UriInterface $uri): ResolveResult
     }
 
     /**
-     * Whether the given node is allowed according to the "nodeType" option
+     * Whether the given node is allowed according to the "nodeType" option and the "onlyMatchSiteNodes" option.
      */
     private function nodeTypeIsAllowed(
         DocumentNodeInfo $nodeInfo,
         ContentRepository $contentRepository,
     ): bool
     {
-        if (isset($this->options['nodeType'])) {
-            $nodeTypeName = $this->options['nodeType'];
-            $nodeTypeManager = $contentRepository->getNodeTypeManager();
-            return (bool)$nodeTypeManager
+        $nodeTypeManager = $contentRepository->getNodeTypeManager();
+
+        $allowedNodeTypeName = $this->options['nodeType'] ?? null;
+        if ($allowedNodeTypeName && !$nodeTypeManager
+            ->getNodeType($nodeInfo->getNodeTypeName())
+            ?->isOfType($allowedNodeTypeName)) {
+            return false;
+        }
+
+        $onlyMatchSiteNodes = $this->options['onlyMatchSiteNodes'] ?? false;
+        if ($onlyMatchSiteNodes && !$nodeTypeManager
                 ->getNodeType($nodeInfo->getNodeTypeName())
-                ?->isOfType($nodeTypeName);
+                ?->isOfType('Neos.Neos:Site')) {
+            return false;
         }
         return true;
     }
